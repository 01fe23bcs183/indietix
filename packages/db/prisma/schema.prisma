generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ORGANIZER
  ADMIN
}

enum Category {
  MUSIC
  COMEDY
  SPORTS
  TECH
  FOOD
  ART
  OTHER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  ATTENDED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  name          String
  phone         String?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  sessions      Session[]
  organizer     Organizer?
  bookings      Booking[]

  @@index([email])
  @@index([role])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model Organizer {
  id           String   @id @default(cuid())
  userId       String   @unique
  businessName String
  description  String?
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  events       Event[]
  payouts      Payout[]

  @@index([userId])
  @@index([verified])
}

model Event {
  id          String      @id @default(cuid())
  organizerId String
  title       String
  slug        String      @unique
  description String
  category    Category
  city        String
  venue       String
  date        DateTime
  price       Int
  totalSeats  Int
  status      EventStatus @default(DRAFT)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  organizer   Organizer   @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  bookings    Booking[]

  @@index([slug])
  @@index([organizerId])
  @@index([city])
  @@index([category])
  @@index([date])
  @@index([status])
}

model Booking {
  id            String        @id @default(cuid())
  eventId       String
  userId        String
  quantity      Int
  totalAmount   Int
  paymentStatus PaymentStatus @default(PENDING)
  status        BookingStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  event         Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
  @@index([paymentStatus])
  @@index([status])
}

model Payout {
  id          String        @id @default(cuid())
  organizerId String
  amount      Int
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  organizer   Organizer     @relation(fields: [organizerId], references: [id], onDelete: Cascade)

  @@index([organizerId])
  @@index([status])
}
